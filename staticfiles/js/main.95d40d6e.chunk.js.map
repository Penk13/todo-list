{"version":3,"sources":["components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["CustomModal","props","handleChange","e","target","name","value","type","checked","activeItem","state","setState","this","toggle","onSave","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","title","onChange","placeholder","check","completed","ModalFooter","Button","color","onClick","React","Component","axios","defaults","xsrfCookieName","xsrfHeaderName","App","refreshList","get","then","res","taskList","data","catch","err","console","log","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","item","map","editItem","handleDelete","id","modal","handleSubmit","put","post","delete","createItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95d40d6e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// importing all of these classes from reactstrap module\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\nclass CustomModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeItem: this.props.activeItem,\r\n    };\r\n  }\r\n\r\n  // 1\r\n  // changes handler to check if a checkbox is checked or not\r\n  handleChange = (e) => {\r\n    let { name, value } = e.target;\r\n    if (e.target.type === \"checkbox\") {\r\n      value = e.target.checked;\r\n    }\r\n    const activeItem = { ...this.state.activeItem, [name]: value };\r\n    this.setState({ activeItem });\r\n  };\r\n\r\n  render() {\r\n    const { toggle, onSave } = this.props;\r\n    return (\r\n      <Modal isOpen={true} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}> Task Item </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup>\r\n              <Label for=\"title\">Title</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={this.state.activeItem.title}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Enter Task Title\"\r\n              />\r\n            </FormGroup>\r\n\r\n            <FormGroup check>\r\n              <Label for=\"completed\">\r\n                <Input\r\n                  type=\"checkbox\"\r\n                  name=\"completed\"\r\n                  checked={this.state.activeItem.completed}\r\n                  onChange={this.handleChange}\r\n                />\r\n                Completed\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n\r\n        <ModalFooter>\r\n          <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\r\n            Save\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CustomModal;\r\n","import React, { Component } from \"react\";\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = \"csrftoken\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      viewCompleted: false,\n      taskList: [],\n      activeItem: {\n        title: \"\",\n        completed: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.refreshList();\n  }\n\n  refreshList = () => {\n    axios\n      .get(\"api/tasks/\")\n      .then((res) => this.setState({ taskList: res.data }))\n      .catch((err) => console.log(err));\n  };\n\n  // 1 SUCCESS\n  displayCompleted = (status) => {\n    if (status) return this.setState({ viewCompleted: true });\n    return this.setState({ viewCompleted: false });\n  };\n\n  // 2 SUCCESS\n  renderTabList = () => {\n    return (\n      <div className=\"tab-list m-3 text-center\">\n        <span\n          className={this.state.viewCompleted ? \"active\" : \"\"}\n          onClick={() => this.displayCompleted(true)}\n        >\n          Completed\n        </span>\n        <span\n          className={this.state.viewCompleted ? \"\" : \"active\"}\n          onClick={() => this.displayCompleted(false)}\n        >\n          Incompleted\n        </span>\n      </div>\n    );\n  };\n\n  // 3 SUCCESS\n  renderItems = () => {\n    const { viewCompleted } = this.state;\n    const newItems = this.state.taskList.filter(\n      (item) => item.completed === viewCompleted\n    );\n    return newItems.map((item) => (\n      <li\n        key={item.id}\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\n      >\n        <span\n          className={`todo-title ${\n            this.state.viewCompleted ? \"completed-todo\" : \"\"\n          }`}\n          title={item.title}\n        >\n          {item.title}\n        </span>\n        <span>\n          <button\n            className=\"btn btn-info mx-2\"\n            onClick={() => this.editItem(item)}\n          >\n            Edit\n          </button>\n          <button\n            className=\"btn btn-danger mx-2\"\n            onClick={() => this.handleDelete(item)}\n          >\n            Delete\n          </button>\n        </span>\n      </li>\n    ));\n  };\n\n  // 4 SUCCESS\n  toggle = () => {\n    this.setState({ modal: !this.state.modal });\n  };\n  handleSubmit = (item) => {\n    this.toggle();\n    // Check if it is edit item or create item\n    console.log(item.id);\n    if (item.id) {\n      axios\n        .put(`api/tasks/${item.id}/`, item)\n        .then((res) => this.refreshList());\n    } else {\n      axios.post(\"api/tasks/\", item).then((res) => this.refreshList());\n    }\n  };\n  handleDelete = (item) => {\n    axios.delete(`api/tasks/${item.id}`).then((res) => this.refreshList());\n  };\n  editItem = (item) => {\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n\n  // 5 SUCCESS\n  createItem = () => {\n    const item = { title: \"\", completed: false, modal: !this.state.modal };\n    this.setState({\n      activeItem: item,\n      modal: !this.state.modal,\n    });\n  };\n\n  render() {\n    return (\n      <main className=\"content p-3 bg-info\">\n        <h1 className=\"text-center my-4 text-light\">TASK MANAGER</h1>\n        <div className=\"row\">\n          <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n            <div className=\"card p-3\">\n              <button className=\"btn btn-success m-3\" onClick={this.createItem}>\n                Add Task\n              </button>\n              {this.renderTabList()}\n              <ul className=\"list-group list-group-flush\"></ul>\n              {this.renderItems()}\n            </div>\n          </div>\n        </div>\n        {this.state.modal ? (\n          <Modal\n            activeItem={this.state.activeItem}\n            toggle={this.toggle}\n            onSave={this.handleSubmit}\n          />\n        ) : null}\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}